diff -u -r SVDLIBC.orig/las2.c SVDLIBC/las2.c
--- SVDLIBC.orig/las2.c	2012-06-22 19:44:06.000000000 +0200
+++ SVDLIBC/las2.c	2015-11-19 09:11:17.118693285 +0100
@@ -28,6 +28,9 @@
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.
 */
+/*
+ * Modified by moocow for PDL::SVDLIBC distribution
+ */
 
 #include <stdio.h>
 #include <stdlib.h>
@@ -370,12 +373,17 @@
   if (check_parameters(A, dimensions, iterations, end[0], end[1], TRUE))
     return NULL;
 
+#if 0
+  /* Fri, 24 Jul 2015 11:31:27 +0200 moocow
+   *  + disable transposition for PDL::SVDLIBC, since we're getting segfaults whenever this code runs
+   */
   /* If A is wide, the SVD is computed on its transpose for speed. */
   if (A->cols >= A->rows * 1.2) {
     if (SVDVerbosity > 0) printf("TRANSPOSING THE MATRIX FOR SPEED\n");
     transpose = TRUE;
     A = svdTransposeS(A);
   }
+#endif
 
   n = A->cols;
   /* Compute machine precision */ 
diff -u -r SVDLIBC.orig/svdutil.c SVDLIBC/svdutil.c
--- SVDLIBC.orig/svdutil.c	2012-06-22 18:47:42.000000000 +0200
+++ SVDLIBC/svdutil.c	2015-11-24 09:47:59.621805489 +0100
@@ -28,6 +28,9 @@
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.
 */
+/*
+ * Modified by moocow for PDL::SVDLIBC distribution
+ */
 
 #include <stdio.h>
 #include <stdlib.h>
@@ -37,7 +40,21 @@
 #include <math.h>
 #include <sys/types.h>
 #include <sys/stat.h>
+#if 0
+/* Mon, Tue, 24 Nov 2015 09:42:30 +0100 moocow
+ *  + disable netinet/in.h for win32 (why is it even here anyways?)
+ *    - probably for ntohl() and htonl(); gnu libc docs say:
+ *        uint32_t ntohl (uint32_t NETLONG)
+ *        converts the 'uint32_t' integer NETLONG from network byte order to host byte order;
+ *        This is used for IPv4 Internet addresses.
+ *      * this is only used by svd_(read|write)Bin(Int|Float)() functions, which
+ *        we don't need here; replacing calls with dummy macros
+ */
 #include <netinet/in.h>
+#else
+#define svdlibc_ntohl(x) x
+#define svdlibc_htonl(x) x
+#endif
 #include "svdlib.h"
 #include "svdutil.h"
 
@@ -234,7 +251,7 @@
 char svd_readBinInt(FILE *file, int *val) {
   int x;
   if (fread(&x, sizeof(int), 1, file) == 1) {
-    *val = ntohl(x);
+    *val = svdlibc_ntohl(x);	//-- moo: disable ntohl() for PDL::SVDLIBC
     return FALSE;
   }
   return TRUE;
@@ -245,7 +262,7 @@
   int x;
   float y;
   if (fread(&x, sizeof(int), 1, file) == 1) {
-    x = ntohl(x);
+    x = svdlibc_ntohl(x);	//-- moo: disable ntohl() for PDL::SVDLIBC
     y = *((float *) &x);
     *val = y;
     return FALSE;
@@ -254,14 +271,14 @@
 }
 
 char svd_writeBinInt(FILE *file, int x) {
-  int y = htonl(x);
+  int y = svdlibc_htonl(x);	//-- moo: disable htonl() for PDL::SVDLIBC
   if (fwrite(&y, sizeof(int), 1, file) != 1) return TRUE;
   return FALSE;
 }
 
 /* This takes a real in host order and writes a float in network order. */
 char svd_writeBinFloat(FILE *file, float r) {
-  int y = htonl(*((int *) &r));
+  int y = svdlibc_htonl(*((int *) &r));	//-- moo: disable htonl() for PDL::SVDLIBC
   if (fwrite(&y, sizeof(int), 1, file) != 1) return TRUE;
   return FALSE;
 }
